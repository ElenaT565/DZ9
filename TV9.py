#Задача1
import scipy.stats as stats
import numpy as np
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]) #nezavisimaya peremennaya = priznak
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832]) #celevaya peremennaya
n=10

#1_коэффициенты линейной регрессии b1, b0
B1 = (n*np.sum(zp*ks) - np.sum(ks)* np.sum(zp))/(n*np.sum(zp**2) - np.sum(zp)**2)
B0 = (np.mean(ks) - B1*(np.mean(zp))) #интерсепт
print(f'B1 = {B1}')

import scipy.stats as stats
import numpy as np
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]) #nezavisimaya peremennaya = priznak
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832]) #celevaya peremennaya
n=10

#1_коэффициенты линейной регрессии b1, b0
B1 = (n*np.sum(zp*ks) - np.sum(ks)* np.sum(zp))/(n*np.sum(zp**2) - np.sum(zp)**2)
B0 = (np.mean(ks) - B1*(np.mean(zp))) #интерсепт
print(f'B1 = {B1}')
#B1 = 2.6205388824027653

B0 = (np.mean(ks) - B1*(np.mean(zp))) 
print(f'B0 = {B0}')
#B0 = 444.17735732435955

#рассчет линейной регрессии

ks_1 = B1*zp #without intercept
ks_2 = B1*zp + B0 #with intercept
print (f'ks_1 array({ks_1})')
print (f'ks_2 array({ks_2})')

#ks_1 array([ 91.71886088 117.92424971 497.90238766 524.10777648 104.8215553
#183.43772177 141.50909965 393.08083236 314.46466589 288.25927706])
#ks_2 array([535.89621821 562.10160703 942.07974498 968.2851338  548.99891262
#627.61507909 585.68645697 837.25818968 758.64202321 732.43663439])

#2_коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept)
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]) 
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832]) 
#средняя квадратичная ошибка
#mse = 1/n * np.su,((B1*x-y)**2)
#mse = (2/n) * np.sum((B1*x-y)*x) #производная от mse = 1/n * np.su,((B1*x-y)**2)

def mse_(B1, y=ks, x=zp, n=10):
 return np.sum((B1*x - y)**2)/n
print(mse_(5.889820420034632))

#56516.8584157194

alpha = 1e-5
# линейная регрессия
B1 = 0.1
for i in range (50000):
 y=ks
 x=zp
 n=10  
 B1 -= alpha * (2/n)* np.sum ((B1*x - y)*x)
 if i%5000 ==0:  
   print('Iterantion = {i}, B1 = {B1}, mse = {mse}'.format(i=i, B1=B1, mse = mse_(B1)))

#Iterantion = 0, B1 = 1.6952808000000004, mse = 298904.5992334053
#Iterantion = 5000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 10000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 15000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 20000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 25000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 30000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 35000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 40000, B1 = 5.889820420132688, mse = 56516.8584157194
#Iterantion = 45000, B1 = 5.889820420132688, mse = 56516.8584157194

import numpy as np
from sklearn.linear_model import LinearRegression

model = LinearRegression() #задаем модель линейной регрессии

# делаем массив х двумерным атрибутом reshape(-1,1)
x=zp.reshape(-1,1)
print(f'array_zp({x})')
regres = model.fit(x,y) #подбираем коэффициенты
print(regres.intercept_) #выводим intercept
print (regres.coef_) #выводим кэффициенты

#array_zp([[ 35]
#  [ 45]
#  [190]
#  [200]
#  [ 40]
#  [ 70]
#  [ 54]
#  [150]
#  [120]
#  [110]])
# 444.1773573243596
# [2.62053888]

#3_коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (c intercept)

def mse_(B1,B0,y=ks, x=zp, n=10):
 return np.sum((B0 + B1*x - y)**2)/n
print(mse_(5.889820420132689, 338.13077811397255))

#94653.3978521788

# линейная регрессия
alpha = 3e-5
B1 = 0.1
B0 = 0.1
for i in range (1000001):
 y=ks
 x=zp
 n=10  
 B1 -= alpha * (2/n)* np.sum ((B1*x - y)*x)
 B0 -= alpha * (2/n)* np.sum ((B1*x - y))   
 if i%50000 ==0:  
  print('Iterantion = {i}, B1 = {B1}, B0 = {B0}, mse = {mse}'.format(i=i, B1=B1, B0=B0, mse = mse_(B1,B0)))

#Iterantion = 0, B1 = 4.8858424, B0 = 0.11286853483840001, mse = 328755.67722862575
# Iterantion = 50000, B1 = 5.889820420132689, B0 = 338.13077811397255, mse = 188360.26959752408
# Iterantion = 100000, B1 = 5.889820420132689, B0 = 676.1474063082546, mse = 127457.31346089463
# Iterantion = 150000, B1 = 5.889820420132689, B0 = 1014.1640345025367, mse = 295064.8391959282
# Iterantion = 200000, B1 = 5.889820420132689, B0 = 1352.1806627023377, mse = 691182.8468109579
# Iterantion = 250000, B1 = 5.889820420132689, B0 = 1690.197290902304, mse = 1315811.3363054742
# Iterantion = 300000, B1 = 5.889820420132689, B0 = 2028.2139191022704, mse = 2168950.3076793393
# Iterantion = 350000, B1 = 5.889820420132689, B0 = 2366.2305472915336, mse = 3250599.7608946846
# Iterantion = 400000, B1 = 5.889820420132689, B0 = 2704.2471754801313, mse = 4560759.695972102
# Iterantion = 450000, B1 = 5.889820420132689, B0 = 3042.263803668729, mse = 6099430.112913499
# Iterantion = 500000, B1 = 5.889820420132689, B0 = 3380.2804318573267, mse = 7866611.011718872
# Iterantion = 550000, B1 = 5.889820420132689, B0 = 3718.2970600459244, mse = 9862302.39238822
# Iterantion = 600000, B1 = 5.889820420132689, B0 = 4056.313688234522, mse = 12086504.25492155
# Iterantion = 650000, B1 = 5.889820420132689, B0 = 4394.330316443187, mse = 14539216.59947125
# Iterantion = 700000, B1 = 5.889820420132689, B0 = 4732.346944654522, mse = 17220439.425934143
# Iterantion = 750000, B1 = 5.889820420132689, B0 = 5070.363572865857, mse = 20130172.734291755
# Iterantion = 800000, B1 = 5.889820420132689, B0 = 5408.380201077192, mse = 23268416.524544086
# Iterantion = 850000, B1 = 5.889820420132689, B0 = 5746.396829288527, mse = 26635170.796691142
# Iterantion = 900000, B1 = 5.889820420132689, B0 = 6084.4134574998625, mse = 30230435.55073291
# Iterantion = 950000, B1 = 5.889820420132689, B0 = 6422.4300857111975, mse = 34054210.78666941
# Iterantion = 1000000, B1 = 5.889820420132689, B0 = 6760.446713922533, mse = 38106496.50450061